
// Generated from /home/carbon/code/compiler_guas/grammar/SYSYLexer.g4 by ANTLR 4.12.0


#include "SYSYLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct SYSYLexerStaticData final {
  SYSYLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SYSYLexerStaticData(const SYSYLexerStaticData&) = delete;
  SYSYLexerStaticData(SYSYLexerStaticData&&) = delete;
  SYSYLexerStaticData& operator=(const SYSYLexerStaticData&) = delete;
  SYSYLexerStaticData& operator=(SYSYLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag sysylexerLexerOnceFlag;
SYSYLexerStaticData *sysylexerLexerStaticData = nullptr;

void sysylexerLexerInitialize() {
  assert(sysylexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<SYSYLexerStaticData>(
    std::vector<std::string>{
      "Comma", "SemiColon", "Assign", "LeftBracket", "RightBracket", "LeftBrace", 
      "RightBrace", "LeftParen", "RightParen", "If", "Else", "While", "Const", 
      "Equal", "NonEqual", "Less", "Greater", "LessEqual", "GreaterEqual", 
      "Plus", "Minus", "Multiply", "Divide", "Modulo", "Not", "And", "Or", 
      "Int", "Float", "Void", "Break", "Continue", "Return", "Identifier", 
      "IntConst", "FloatConst", "LineComment", "BlockComment", "WhiteSpace"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "','", "';'", "'='", "'['", "']'", "'{'", "'}'", "'('", "')'", 
      "'if'", "'else'", "'while'", "'const'", "'=='", "'!='", "'<'", "'>'", 
      "'<='", "'>='", "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'&&'", 
      "'||'", "'int'", "'float'", "'void'", "", "", "", "'break'", "'continue'", 
      "'return'"
    },
    std::vector<std::string>{
      "", "Comma", "SemiColon", "Assign", "LeftBracket", "RightBracket", 
      "LeftBrace", "RightBrace", "LeftParen", "RightParen", "If", "Else", 
      "While", "Const", "Equal", "NonEqual", "Less", "Greater", "LessEqual", 
      "GreaterEqual", "Plus", "Minus", "Multiply", "Divide", "Modulo", "Not", 
      "And", "Or", "Int", "Float", "Void", "Identifier", "FloatConst", "IntConst", 
      "Break", "Continue", "Return", "LineComment", "BlockComment", "WhiteSpace"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,39,355,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,
  	4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
  	1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,
  	1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,
  	1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,
  	1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,
  	1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,
  	1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
  	1,33,1,33,5,33,191,8,33,10,33,12,33,194,9,33,1,34,1,34,5,34,198,8,34,
  	10,34,12,34,201,9,34,1,34,1,34,5,34,205,8,34,10,34,12,34,208,9,34,1,34,
  	1,34,1,34,4,34,213,8,34,11,34,12,34,214,3,34,217,8,34,1,35,5,35,220,8,
  	35,10,35,12,35,223,9,35,1,35,1,35,4,35,227,8,35,11,35,12,35,228,1,35,
  	4,35,232,8,35,11,35,12,35,233,1,35,3,35,237,8,35,1,35,1,35,3,35,241,8,
  	35,1,35,4,35,244,8,35,11,35,12,35,245,3,35,248,8,35,1,35,4,35,251,8,35,
  	11,35,12,35,252,1,35,1,35,3,35,257,8,35,1,35,4,35,260,8,35,11,35,12,35,
  	261,1,35,1,35,1,35,5,35,267,8,35,10,35,12,35,270,9,35,1,35,1,35,4,35,
  	274,8,35,11,35,12,35,275,1,35,1,35,3,35,280,8,35,1,35,4,35,283,8,35,11,
  	35,12,35,284,3,35,287,8,35,3,35,289,8,35,1,36,1,36,1,36,1,36,1,36,1,36,
  	3,36,297,8,36,1,36,1,36,1,36,3,36,302,8,36,1,36,5,36,305,8,36,10,36,12,
  	36,308,9,36,1,36,1,36,3,36,312,8,36,1,36,3,36,315,8,36,1,36,5,36,318,
  	8,36,10,36,12,36,321,9,36,5,36,323,8,36,10,36,12,36,326,9,36,1,36,3,36,
  	329,8,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,5,37,339,8,37,10,37,
  	12,37,342,9,37,1,37,1,37,1,37,1,37,1,37,1,38,4,38,350,8,38,11,38,12,38,
  	351,1,38,1,38,1,340,0,39,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
  	21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
  	22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,34,63,35,65,36,
  	67,31,69,33,71,32,73,37,75,38,77,39,1,0,12,3,0,65,90,95,95,97,122,4,0,
  	48,57,65,90,95,95,97,122,1,0,48,55,1,0,49,57,1,0,48,57,2,0,88,88,120,
  	120,3,0,48,57,65,70,97,102,2,0,69,69,101,101,2,0,43,43,45,45,2,0,80,80,
  	112,112,3,0,10,10,13,13,92,92,3,0,9,10,13,13,32,32,387,0,1,1,0,0,0,0,
  	3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
  	0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
  	25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
  	0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
  	0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
  	57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,
  	0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
  	0,1,79,1,0,0,0,3,81,1,0,0,0,5,83,1,0,0,0,7,85,1,0,0,0,9,87,1,0,0,0,11,
  	89,1,0,0,0,13,91,1,0,0,0,15,93,1,0,0,0,17,95,1,0,0,0,19,97,1,0,0,0,21,
  	100,1,0,0,0,23,105,1,0,0,0,25,111,1,0,0,0,27,117,1,0,0,0,29,120,1,0,0,
  	0,31,123,1,0,0,0,33,125,1,0,0,0,35,127,1,0,0,0,37,130,1,0,0,0,39,133,
  	1,0,0,0,41,135,1,0,0,0,43,137,1,0,0,0,45,139,1,0,0,0,47,141,1,0,0,0,49,
  	143,1,0,0,0,51,145,1,0,0,0,53,148,1,0,0,0,55,151,1,0,0,0,57,155,1,0,0,
  	0,59,161,1,0,0,0,61,166,1,0,0,0,63,172,1,0,0,0,65,181,1,0,0,0,67,188,
  	1,0,0,0,69,216,1,0,0,0,71,288,1,0,0,0,73,301,1,0,0,0,75,334,1,0,0,0,77,
  	349,1,0,0,0,79,80,5,44,0,0,80,2,1,0,0,0,81,82,5,59,0,0,82,4,1,0,0,0,83,
  	84,5,61,0,0,84,6,1,0,0,0,85,86,5,91,0,0,86,8,1,0,0,0,87,88,5,93,0,0,88,
  	10,1,0,0,0,89,90,5,123,0,0,90,12,1,0,0,0,91,92,5,125,0,0,92,14,1,0,0,
  	0,93,94,5,40,0,0,94,16,1,0,0,0,95,96,5,41,0,0,96,18,1,0,0,0,97,98,5,105,
  	0,0,98,99,5,102,0,0,99,20,1,0,0,0,100,101,5,101,0,0,101,102,5,108,0,0,
  	102,103,5,115,0,0,103,104,5,101,0,0,104,22,1,0,0,0,105,106,5,119,0,0,
  	106,107,5,104,0,0,107,108,5,105,0,0,108,109,5,108,0,0,109,110,5,101,0,
  	0,110,24,1,0,0,0,111,112,5,99,0,0,112,113,5,111,0,0,113,114,5,110,0,0,
  	114,115,5,115,0,0,115,116,5,116,0,0,116,26,1,0,0,0,117,118,5,61,0,0,118,
  	119,5,61,0,0,119,28,1,0,0,0,120,121,5,33,0,0,121,122,5,61,0,0,122,30,
  	1,0,0,0,123,124,5,60,0,0,124,32,1,0,0,0,125,126,5,62,0,0,126,34,1,0,0,
  	0,127,128,5,60,0,0,128,129,5,61,0,0,129,36,1,0,0,0,130,131,5,62,0,0,131,
  	132,5,61,0,0,132,38,1,0,0,0,133,134,5,43,0,0,134,40,1,0,0,0,135,136,5,
  	45,0,0,136,42,1,0,0,0,137,138,5,42,0,0,138,44,1,0,0,0,139,140,5,47,0,
  	0,140,46,1,0,0,0,141,142,5,37,0,0,142,48,1,0,0,0,143,144,5,33,0,0,144,
  	50,1,0,0,0,145,146,5,38,0,0,146,147,5,38,0,0,147,52,1,0,0,0,148,149,5,
  	124,0,0,149,150,5,124,0,0,150,54,1,0,0,0,151,152,5,105,0,0,152,153,5,
  	110,0,0,153,154,5,116,0,0,154,56,1,0,0,0,155,156,5,102,0,0,156,157,5,
  	108,0,0,157,158,5,111,0,0,158,159,5,97,0,0,159,160,5,116,0,0,160,58,1,
  	0,0,0,161,162,5,118,0,0,162,163,5,111,0,0,163,164,5,105,0,0,164,165,5,
  	100,0,0,165,60,1,0,0,0,166,167,5,98,0,0,167,168,5,114,0,0,168,169,5,101,
  	0,0,169,170,5,97,0,0,170,171,5,107,0,0,171,62,1,0,0,0,172,173,5,99,0,
  	0,173,174,5,111,0,0,174,175,5,110,0,0,175,176,5,116,0,0,176,177,5,105,
  	0,0,177,178,5,110,0,0,178,179,5,117,0,0,179,180,5,101,0,0,180,64,1,0,
  	0,0,181,182,5,114,0,0,182,183,5,101,0,0,183,184,5,116,0,0,184,185,5,117,
  	0,0,185,186,5,114,0,0,186,187,5,110,0,0,187,66,1,0,0,0,188,192,7,0,0,
  	0,189,191,7,1,0,0,190,189,1,0,0,0,191,194,1,0,0,0,192,190,1,0,0,0,192,
  	193,1,0,0,0,193,68,1,0,0,0,194,192,1,0,0,0,195,199,5,48,0,0,196,198,7,
  	2,0,0,197,196,1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,
  	200,217,1,0,0,0,201,199,1,0,0,0,202,206,7,3,0,0,203,205,7,4,0,0,204,203,
  	1,0,0,0,205,208,1,0,0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,217,1,0,0,
  	0,208,206,1,0,0,0,209,210,5,48,0,0,210,212,7,5,0,0,211,213,7,6,0,0,212,
  	211,1,0,0,0,213,214,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,217,1,
  	0,0,0,216,195,1,0,0,0,216,202,1,0,0,0,216,209,1,0,0,0,217,70,1,0,0,0,
  	218,220,7,4,0,0,219,218,1,0,0,0,220,223,1,0,0,0,221,219,1,0,0,0,221,222,
  	1,0,0,0,222,224,1,0,0,0,223,221,1,0,0,0,224,226,5,46,0,0,225,227,7,4,
  	0,0,226,225,1,0,0,0,227,228,1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,
  	237,1,0,0,0,230,232,7,4,0,0,231,230,1,0,0,0,232,233,1,0,0,0,233,231,1,
  	0,0,0,233,234,1,0,0,0,234,235,1,0,0,0,235,237,5,46,0,0,236,221,1,0,0,
  	0,236,231,1,0,0,0,237,247,1,0,0,0,238,240,7,7,0,0,239,241,7,8,0,0,240,
  	239,1,0,0,0,240,241,1,0,0,0,241,243,1,0,0,0,242,244,7,4,0,0,243,242,1,
  	0,0,0,244,245,1,0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,248,1,0,0,0,
  	247,238,1,0,0,0,247,248,1,0,0,0,248,289,1,0,0,0,249,251,7,4,0,0,250,249,
  	1,0,0,0,251,252,1,0,0,0,252,250,1,0,0,0,252,253,1,0,0,0,253,254,1,0,0,
  	0,254,256,7,7,0,0,255,257,7,8,0,0,256,255,1,0,0,0,256,257,1,0,0,0,257,
  	259,1,0,0,0,258,260,7,4,0,0,259,258,1,0,0,0,260,261,1,0,0,0,261,259,1,
  	0,0,0,261,262,1,0,0,0,262,289,1,0,0,0,263,264,5,48,0,0,264,268,7,5,0,
  	0,265,267,7,6,0,0,266,265,1,0,0,0,267,270,1,0,0,0,268,266,1,0,0,0,268,
  	269,1,0,0,0,269,271,1,0,0,0,270,268,1,0,0,0,271,273,5,46,0,0,272,274,
  	7,6,0,0,273,272,1,0,0,0,274,275,1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,
  	0,276,286,1,0,0,0,277,279,7,9,0,0,278,280,7,8,0,0,279,278,1,0,0,0,279,
  	280,1,0,0,0,280,282,1,0,0,0,281,283,7,6,0,0,282,281,1,0,0,0,283,284,1,
  	0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,287,1,0,0,0,286,277,1,0,0,0,
  	286,287,1,0,0,0,287,289,1,0,0,0,288,236,1,0,0,0,288,250,1,0,0,0,288,263,
  	1,0,0,0,289,72,1,0,0,0,290,291,5,47,0,0,291,302,5,47,0,0,292,293,5,47,
  	0,0,293,294,5,92,0,0,294,296,1,0,0,0,295,297,5,13,0,0,296,295,1,0,0,0,
  	296,297,1,0,0,0,297,298,1,0,0,0,298,299,5,10,0,0,299,300,1,0,0,0,300,
  	302,5,47,0,0,301,290,1,0,0,0,301,292,1,0,0,0,302,306,1,0,0,0,303,305,
  	8,10,0,0,304,303,1,0,0,0,305,308,1,0,0,0,306,304,1,0,0,0,306,307,1,0,
  	0,0,307,324,1,0,0,0,308,306,1,0,0,0,309,314,5,92,0,0,310,312,5,13,0,0,
  	311,310,1,0,0,0,311,312,1,0,0,0,312,313,1,0,0,0,313,315,5,10,0,0,314,
  	311,1,0,0,0,314,315,1,0,0,0,315,319,1,0,0,0,316,318,8,10,0,0,317,316,
  	1,0,0,0,318,321,1,0,0,0,319,317,1,0,0,0,319,320,1,0,0,0,320,323,1,0,0,
  	0,321,319,1,0,0,0,322,309,1,0,0,0,323,326,1,0,0,0,324,322,1,0,0,0,324,
  	325,1,0,0,0,325,328,1,0,0,0,326,324,1,0,0,0,327,329,5,13,0,0,328,327,
  	1,0,0,0,328,329,1,0,0,0,329,330,1,0,0,0,330,331,5,10,0,0,331,332,1,0,
  	0,0,332,333,6,36,0,0,333,74,1,0,0,0,334,335,5,47,0,0,335,336,5,42,0,0,
  	336,340,1,0,0,0,337,339,9,0,0,0,338,337,1,0,0,0,339,342,1,0,0,0,340,341,
  	1,0,0,0,340,338,1,0,0,0,341,343,1,0,0,0,342,340,1,0,0,0,343,344,5,42,
  	0,0,344,345,5,47,0,0,345,346,1,0,0,0,346,347,6,37,0,0,347,76,1,0,0,0,
  	348,350,7,11,0,0,349,348,1,0,0,0,350,351,1,0,0,0,351,349,1,0,0,0,351,
  	352,1,0,0,0,352,353,1,0,0,0,353,354,6,38,0,0,354,78,1,0,0,0,32,0,192,
  	199,206,214,216,221,228,233,236,240,245,247,252,256,261,268,275,279,284,
  	286,288,296,301,306,311,314,319,324,328,340,351,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  sysylexerLexerStaticData = staticData.release();
}

}

SYSYLexer::SYSYLexer(CharStream *input) : Lexer(input) {
  SYSYLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *sysylexerLexerStaticData->atn, sysylexerLexerStaticData->decisionToDFA, sysylexerLexerStaticData->sharedContextCache);
}

SYSYLexer::~SYSYLexer() {
  delete _interpreter;
}

std::string SYSYLexer::getGrammarFileName() const {
  return "SYSYLexer.g4";
}

const std::vector<std::string>& SYSYLexer::getRuleNames() const {
  return sysylexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& SYSYLexer::getChannelNames() const {
  return sysylexerLexerStaticData->channelNames;
}

const std::vector<std::string>& SYSYLexer::getModeNames() const {
  return sysylexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& SYSYLexer::getVocabulary() const {
  return sysylexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView SYSYLexer::getSerializedATN() const {
  return sysylexerLexerStaticData->serializedATN;
}

const atn::ATN& SYSYLexer::getATN() const {
  return *sysylexerLexerStaticData->atn;
}




void SYSYLexer::initialize() {
  ::antlr4::internal::call_once(sysylexerLexerOnceFlag, sysylexerLexerInitialize);
}
